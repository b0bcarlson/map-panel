{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPopups","panelId","lastValueMeasure","validatedMetrics","hideAllGraphPopups","document","querySelector","options","length","drawMeasuresPopup","type","aqiIndex","calculateAQIIndex","value","getElementById","style","display","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","error","console","log","drawSelect","metricsToShow","providedMetrics","currentParameterForChart","el","firstChild","removeChild","metricsKeys","Object","keys","emptyOption","createElement","id","title","innerHTML","selected","appendChild","forEach","metric","elem","newMetric","toUpperCase","selectBox","renderChart","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","map","convertDate","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","units","chartInfo","bootData","user","lightTheme","theme","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","name","data","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","calculateCarsIntensityIndex","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","translatedValues","dpKey","dP","Date","toLocaleString","trans","filter","unit","translatedValue","getSelectedCity","vars","selectedVarName","cityEnv","city","current","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","getCityCoordinates","city_name","url","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","range","index","time_","time","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC","geolocationOptions","enableHighAccuracy","timeout","maximumAge"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\r\n/* Vendor specific */\r\nimport { defaults, isEqual } from 'lodash';\r\n\r\nimport Highcharts from \"../vendor/highcharts/highcharts\";\r\nimport Exporting from '../vendor/highcharts/modules/exporting';\r\n// Initialize exporting module.\r\nExporting(Highcharts);\r\n\r\n/* Grafana Specific */\r\nimport config from 'app/core/config';\r\n\r\nimport { titleize } from './string'\r\n\r\n/* App specific */\r\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS } from '../definitions';\r\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\r\n\r\n\r\n/*\r\n* Primary functions\r\n*/\r\n\r\n/**\r\n* Display popups based in the click in map's marker\r\n*/\r\nfunction drawPopups(panelId, lastValueMeasure, validatedMetrics) {\r\n\r\n  //render popups\r\n  try {\r\n    // Show Metrics Legend (MAP)\r\n\r\n    //draw select\r\n    if(validatedMetrics) {\r\n\r\n      hideAllGraphPopups(panelId)\r\n\r\n      if(document.querySelector('#parameters_dropdown_'+panelId).options.length>1)\r\n        drawMeasuresPopup(panelId, lastValueMeasure, validatedMetrics)\r\n\r\n      switch(lastValueMeasure.type) {\r\n        case 'AirQualityObserved':\r\n          let aqiIndex = calculateAQIIndex(lastValueMeasure.value);\r\n          \r\n          document.getElementById('environment_table_'+panelId).style.display = 'block';\r\n\r\n          drawHealthConcernsPopup(panelId, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\r\n     \r\n          break;\r\n        case 'TrafficFlowObserved':\r\n          drawTrafficFlowPopup(panelId);\r\n          break;\r\n        default:\r\n          drawDefaultPopups(panelId);\r\n      }\r\n    }\r\n    \r\n  } catch(error) {\r\n    console.log(\"Error:\");\r\n    console.log(error);\r\n    console.log(\"lastValueMeasure: \")\r\n    console.log(lastValueMeasure)\r\n  }\r\n}\r\n/*\r\n* Draw the select box in the specific panel, with the specif metrics and select the option\r\n*/\r\nfunction drawSelect(panelId, metricsToShow, providedMetrics, currentParameterForChart) {\r\n  // Remove air paramters from dropdown\r\n  let el = document.querySelector('#parameters_dropdown_'+panelId);\r\n  while ( el.firstChild ) {\r\n    el.removeChild( el.firstChild )\r\n  }\r\n\r\n  let metricsKeys = Object.keys(metricsToShow)\r\n\r\n  //default option\r\n  let emptyOption = document.createElement('option');\r\n  emptyOption.id = 'metricsOption_'+panelId;\r\n  emptyOption.value = 'value';\r\n  emptyOption.title = \"Select this to see the default field values\"\r\n  emptyOption.innerHTML = 'Select Metric';\r\n  if(metricsKeys.length===0)\r\n    emptyOption.selected = 'selected';\r\n  el.appendChild(emptyOption);\r\n\r\n  //select population\r\n  metricsKeys.forEach((metric)=>{\r\n    providedMetrics.forEach((elem)=>{\r\n      if(elem[0] == metric) {\r\n        let newMetric = document.createElement('option');\r\n        newMetric.id = 'metricsOption_'+panelId;\r\n        newMetric.value = metric.toUpperCase();\r\n\r\n        if(currentParameterForChart===newMetric.value)\r\n          newMetric.selected = 'selected';\r\n        \r\n        newMetric.innerHTML = elem[1]?elem[1]:titleize(elem[0]);\r\n\r\n        el.appendChild(newMetric);\r\n      }\r\n    })\r\n  })\r\n  \r\n  let selectBox = document.querySelector('#parameters_dropdown_'+panelId)\r\n  if(selectBox.options.length>0)\r\n    selectBox.style.display = 'block';\r\n}\r\n/**\r\n* Render's the chart in panel\r\n*/\r\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\r\n  console.debug('renderChart')\r\n  let [type, pointId, fieldName] = chartDetails\r\n\r\n  drawChartCointainer(panelId);\r\n\r\n  //prepare data to chart\r\n  let chartData = selectedPointData.map((elem)=>[ convertDate(elem.created_at), elem[fieldName.toLowerCase()] ]);\r\n\r\n  function getChartMetaInfo() {\r\n    let props = {\r\n      AirQualityObserved: 'Air Quality',\r\n      TrafficFlowObserved: 'Cars'\r\n    }\r\n\r\n    return { \r\n        title: `${props[type]||type}: Device ${pointId} - ${measurementUnits[1]?measurementUnits[1]:titleize(measurementUnits[0])}`,\r\n        units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\r\n      }\r\n  }\r\n\r\n  let chartInfo = getChartMetaInfo();\r\n  \r\n  //config highchart acording with grafana theme\r\n  if(!config.bootData.user.lightTheme) {\r\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\r\n\r\n    // Apply the theme\r\n    Highcharts.setOptions(Highcharts.theme);\r\n  }\r\n\r\n  // let chart = angular.element(\r\n  //     document.getElementById('graph_container_'+panelId)\r\n  // ).highcharts();\r\n\r\n  Highcharts.chart('graph_container_'+panelId,\r\n    {\r\n      chart: {\r\n        type: 'line',\r\n        height: 200,\r\n        zoomType: 'x',\r\n        events: {\r\n          load: function () {            \r\n            chartData = this.series[0]; // set up the updating of the chart each second\r\n          }\r\n        }\r\n      },\r\n      title: {\r\n        text: chartInfo.title\r\n      },\r\n      subtitle: {\r\n        text: ''\r\n      },\r\n      xAxis: {\r\n        type: 'datetime'\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: chartInfo.units\r\n        }\r\n      },\r\n      legend: {\r\n        enabled: false\r\n      },\r\n      series: [{\r\n        name: chartInfo.units,\r\n        data: chartData\r\n      }]\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n* private functions\r\n*/\r\nfunction getDataPointExtraFields(dataPoint) {\r\n\r\n  const values = {\r\n    fillOpacity: 0.5\r\n  }\r\n\r\n  if(dataPoint.type==='AirQualityObserved') {\r\n    let aqiIndex = calculateAQIIndex(dataPoint.value);\r\n    let aqiColor = AQI.color[aqiIndex];\r\n\r\n    defaults(values, {\r\n      color: aqiColor,\r\n      fillColor: aqiColor,\r\n\r\n      aqiColor: aqiColor,\r\n      aqiMeaning: AQI.meaning[aqiIndex],\r\n      aqiRisk: AQI.risks[aqiIndex],\r\n      aqi: dataPoint.value,\r\n\r\n      markerColor: AQI.markerColor[aqiIndex]\r\n    })    \r\n  } else {\r\n    if(dataPoint.type==='TrafficFlowObserved') {\r\n      let colorIndex = calculateCarsIntensityIndex(dataPoint.value)\r\n\r\n      defaults(values, {\r\n        color: CARS_COUNT.color[colorIndex], \r\n        fillColor: CARS_COUNT.color[colorIndex],\r\n        \r\n        markerColor: CARS_COUNT.markerColor[colorIndex]\r\n      })\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction getMapMarkerClassName(type, value) {\r\n  let resp = 'map-marker-';\r\n  if(type==='AirQualityObserved') {\r\n    return resp+AQI.classColor[calculateAQIIndex(value)];\r\n  } else if(type==='TrafficFlowObserved')\r\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\r\n  return resp+'default';\r\n}\r\n\r\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\r\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \r\n  let stickyInfo = '<div class=\"stycky-popup-info\">';\r\n\r\n  if(dataPoint.type==='AirQualityObserved') {\r\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>';\r\n  } else {\r\n    if(dataPoint.type==='TrafficFlowObserved') {\r\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>';\r\n    } else {\r\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>';\r\n    }\r\n  }  \r\n\r\n  //body\r\n  stickyInfo += '<div class=\"body\">';\r\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('');\r\n  stickyInfo += '</div>';\r\n  stickyInfo += '</div>';\r\n\r\n  //console.debug(dataPoint)\r\n  return stickyInfo\r\n}\r\n\r\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\r\n  let translatedValues = Object.keys(dataPoint).map((dpKey)=>{\r\n    let dP = (dpKey==='created_at'?new Date(dataPoint[dpKey]).toLocaleString():dataPoint[dpKey]);\r\n    let trans = metricsTranslations.filter((elem)=>elem[0]===dpKey);\r\n    return { 'name': (trans.length>0 && trans[0][1] ? trans[0][1] : titleize(dpKey) ), value: dP||'-', unit: (trans.length>0 ? trans[0][2] : '') }\r\n  })\r\n  //creation of html row\r\n  return translatedValues.map((translatedValue)=>`<div><span>${translatedValue.name}</span><span>${translatedValue.value} ${translatedValue.unit||''}</span></div>`)\r\n}\r\n\r\n//show all accepted metrics for a specific point id\r\n// function getMetricsToShow(allMetrics, id) {\r\n//   const metricsToShow = {};\r\n//   for (const key in allMetrics) {\r\n//     allMetrics[key].forEach((_value) => {\r\n//       if (_value.id === id) {\r\n//         if (_value.value) {\r\n//           if (!(metricsToShow[key])){\r\n//             metricsToShow[key] = 0;\r\n//           }\r\n//           metricsToShow[key] = _value.value;\r\n//         }\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   //  metricsToShow['aqi'] = aqi;\r\n//   return metricsToShow\r\n// }\r\n\r\n// Given vars passed as param, retrieves the selected city\r\nfunction getSelectedCity(vars, selectedVarName) {\r\n  let cityEnv = vars.filter(elem => elem.name===selectedVarName)\r\n\r\n  let city = null;\r\n  if(cityEnv && cityEnv.length === 1)\r\n    city = cityEnv[0].current.value;\r\n\r\n  return city;\r\n}\r\n\r\nfunction hideAllGraphPopups(panelId) {\r\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\r\n\r\n  for(let map_table_popup of map_table_popups) {\r\n    let popup = document.getElementById(map_table_popup+'_'+panelId);\r\n    if(popup)\r\n      popup.style.display = 'none';\r\n  }\r\n}\r\n\r\nfunction drawDefaultPopups() {  \r\n}\r\n/*\r\n* Draw Traffic Flow Popup\r\n*/\r\nfunction drawTrafficFlowPopup(panelId) {\r\n  document.getElementById('traffic_table_'+panelId).style.display = 'block';\r\n}\r\n/*\r\n* Draw Health Concerns Popup\r\n*/\r\nfunction drawHealthConcernsPopup(panelId, risk, color, meaning, map_size) {\r\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panelId);\r\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panelId+'>div');\r\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panelId+'>div>span>span.color');\r\n  const healthRisk = document.getElementById('health_risk_'+panelId);\r\n\r\n  healthConcernsWrapper.style.display = 'block';\r\n  healthConcernsColor.style.backgroundColor = color;\r\n  healthRisk.innerHTML = risk;\r\n}\r\n/*\r\n* Draw Measures Popup - The popup info is related with the choosed value \r\n*  from select box and with the metrics that came from result set\r\n*  and from a list of what to show metrics\r\n*/\r\nfunction drawMeasuresPopup(panelId, metricsToShow, providedMetrics) {\r\n  const measuresTable = document.querySelector('#measures_table_'+panelId+' > table > tbody');\r\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\r\n\r\n  Object.keys(metricsToShow).forEach((metric)=>{\r\n    providedMetrics.forEach((elem)=>{\r\n      if(elem[0] == metric) {\r\n        let row = measuresTable.insertRow();    // -1 for inserting bottom\r\n        let innerCell0 = elem[1]?elem[1]:titleize(elem[0]);\r\n        let innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2]?` ${elem[2]}`:'');\r\n        let cell0 = row.insertCell(0);\r\n        let cell1 = row.insertCell(1);\r\n\r\n        cell0.innerHTML = innerCell0;\r\n        cell1.innerHTML = innerCell1;        \r\n      }\r\n    })\r\n\r\n  })\r\n\r\n  document.getElementById('measures_table_'+panelId).style.display = 'block';\r\n}\r\n/*\r\n* Draw Chart\r\n*/\r\nfunction drawChartCointainer(panelId) {\r\n  document.querySelector('#data_details_'+panelId).style.display = 'block';\r\n  document.getElementById('data_chart_'+panelId).style.display = 'block';\r\n}\r\n\r\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\r\nfunction getCityCoordinates(city_name) {\r\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\r\n  return fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\r\n    .catch(error => console.error(error))\r\n}\r\n\r\n// gets the aqi index from the AQI var\r\nfunction calculateAQIIndex(value) {\r\n  let aqiIndex;\r\n  AQI.range.forEach((elem, index) => {\r\n    if (value >= elem) {\r\n      aqiIndex = index;\r\n    }\r\n  });\r\n  return aqiIndex;\r\n}\r\n// gets the index from the CARS_COUNT const var\r\nfunction calculateCarsIntensityIndex(value) {\r\n  CARS_COUNT.range.forEach((elem, index) => {\r\n    if (value >= elem) {\r\n      return index;\r\n    }\r\n  });\r\n  return 0;\r\n}\r\n\r\n/*\r\n* Auxiliar functions\r\n*/\r\n// just for improve DRY\r\nfunction convertDate(time_) {\r\n  const time = new Date(time_);\r\n  const day = time.getDate();\r\n  const month = time.getMonth();\r\n  const year = time.getFullYear();\r\n  const hour = time.getHours() - 1;\r\n  const minutes = time.getMinutes();\r\n  const seconds = time.getSeconds();\r\n  const milliseconds = time.getMilliseconds();\r\n  return Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds)\r\n}\r\n\r\nvar geolocationOptions = {\r\n  enableHighAccuracy: true,\r\n  timeout: 5000,\r\n  maximumAge: 110\r\n};\r\n\r\nexport {\r\n\r\n  hideAllGraphPopups, \r\n  drawPopups,\r\n  drawSelect,\r\n  renderChart,\r\n\r\n  getCityCoordinates,\r\n\r\n  getDataPointExtraFields,\r\n  getDataPointStickyInfo,\r\n\r\n  getSelectedCity,\r\n\r\n  getMapMarkerClassName,\r\n\r\n  geolocationOptions\r\n}"]}